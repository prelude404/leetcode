/*
 * @lc app=leetcode.cn id=190 lang=cpp
 *
 * [190] 颠倒二进制位
 */

#include <cstdint>

// 初步思路：其实输入和输出都是十进制整数，只是它们二进制的位数刚好颠倒
// 利用mod倒着读取每一位并逐步添加到原有数字上，由于是32位所以一定要执行到32次而不是while(n>0)

// 方法2：位运算
// 与运算（AND）： 对应位上的两个操作数都为1时，结果为1，否则为0。(&)
// 或运算（OR）： 对应位上的两个操作数都为1时，结果为1，否则为0。(|)
// 异或运算（XOR）： 对应位上的两个操作数相同时，结果为0，不同时结果为1。(^)
// 取反运算（NOT）： 将位的值取反，1变为0，0变为1。(~)
// 左移（<<）： 将位向左移动指定的位数，右边补0，用于乘以2的幂。(<<)
// 右移（>>）： 将位向右移动指定位数，左边补0或补符号位，用于除以2的幂。(>>)

// 方法3：位运算分治（一种分治颠倒二进制数的方法，没仔细看）


// @lc code=start
class Solution {
public:
    /***位运算***/
    uint32_t reverseBits(uint32_t n) {
        
        uint32_t ans = 0;
        
        for(int i=0; i<32; i++){
            ans = ans<<1 | (n & 1);
            n >>= 1;
        }
        
        return ans;
    }

    /***十进制取余运算***/
    // uint32_t reverseBits(uint32_t n) {
    //     uint32_t ans = 0;
    //     for(int i=0; i<32; i++){
    //         ans = ans*2 + (n%2);
    //         n/=2;
    //     }
    //     return ans;
    // }
};
// @lc code=end

